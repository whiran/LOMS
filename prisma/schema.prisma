// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["selectRelationCount"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

//users

enum UserRoles {
  admin
  user
  subuser
}

enum Orderfromuser {
  conform
  notconform
  cancelled
}

model user {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  email      String      @unique
  password   String
  userType   UserRoles   @default(admin)
  normaluser normaluser?
  customers  customer[]
  order      order[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  createdby  String?     @db.ObjectId //this is only when customers and subusers
  strokes    stroke[]
  subusers   subuser[]
}

model normaluser {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  firstname String
  lastname  String
  pnum      String
  sa        String
  sl        String
  city      String
  post      String
  country   String
  region    String
  email     String
  password  String
  user      user?      @relation(fields: [userid], references: [id])
  userid    String?    @unique @db.ObjectId
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  customers customer[]
}

model customer {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  normaluser normaluser @relation(fields: [createdby], references: [id])
  userType   UserRoles  @default(user)
  email      String     @unique
  password   String
  user       user       @relation(fields: [createdby], references: [id])
  createdby  String     @db.ObjectId
  ownid      String     @unique @db.ObjectId
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  subusers   subuser[]
  orders     order[]
}

model subuser {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  customer        customer  @relation(fields: [createdby], references: [id])
  createdby       String    @db.ObjectId
  user            user      @relation(fields: [createdbyuserid], references: [id])
  createdbyuserid String    @db.ObjectId
  email           String    @unique
  userType        UserRoles @default(subuser)
  ownid           String    @unique @db.ObjectId
  password        String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  orders          order[]
}

//orders

model order {
  id                 String        @id @default(auto()) @map("_id") @db.ObjectId
  stroke             stroke        @relation(fields: [strokenum], references: [strokeno])
  strokenum          String
  constract          contract      @relation(fields: [contractnum], references: [constractno])
  contractnum        String
  coo                String
  fiber              String
  component          String
  caretext           String
  washsimbol         String
  sizeration         String
  state              state         @default(pending)
  qty                Int?
  orderstatefromuser Orderfromuser @default(notconform)
  orderqtys          orderqty[]
  user               user?         @relation(fields: [userid], references: [id])
  userid             String?       @db.ObjectId
  customer           customer?     @relation(fields: [cusid], references: [id])
  cusid              String?       @db.ObjectId
  subuser            subuser?      @relation(fields: [subid], references: [id])
  subid              String?       @db.ObjectId
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  ordervalue         Int?
}

enum state {
  pending
  processing
  completed
  hold
}

model stroke {
  strokeno  String     @id @map("_id")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  contracts contract[]
  user      user?      @relation(fields: [userid], references: [id])
  userid    String?    @db.ObjectId
  orders    order[]
}

model contract {
  constractno String      @id @map("_id")
  season      String
  stroke_desc String
  prodesc     String
  tdept       String
  stroke      stroke      @relation(fields: [stroke_id], references: [strokeno])
  stroke_id   String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  carelabel   carelabel[]
  art         art[]
  orders      order[]
}

model carelabel {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  ref_no      String
  wash_symbol String
  fibre       String
  zoordes     String
  mpart_fw    String
  coo         String
  caretext    String
  contract    contract     @relation(fields: [contract_id], references: [constractno])
  contract_id String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  otherlabel  otherlabel[]
}

model otherlabel {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  fef_no       String
  label_type   String
  carelabel    carelabel @relation(fields: [carelabel_id], references: [id])
  carelabel_id String    @db.ObjectId
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  contity      contity[]
}

model contity {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  color_code     String
  color_name     String
  upc_no         String
  primary_size   String
  secondary_size String
  selling_price  Float
  order_qty      String
  otherlabel     otherlabel @relation(fields: [otherlabel_id], references: [id])
  otherlabel_id  String     @db.ObjectId
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}

model image {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  data Bytes
}

model art {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  contract    contract @relation(fields: [contract_id], references: [constractno])
  contract_id String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

//xml upload settings
model label {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  date        String
  time        String
  recordcount String
  runnumber   String
  strokes     strokexml[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model strokexml {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  datelastmodified  String
  strokenumber      String
  strokedescription String
  contractnumber    String
  constractstatus   String
  departmentnumber  String
  season            String
  supplierseries    String
  countrycode       String
  factorycode       String
  productdesc       String
  strokelabels      strokelabel[]
  colours           colour[]
  label             label         @relation(fields: [labelid], references: [id])
  labelid           String        @db.ObjectId
}

model strokelabel {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  labelref      String
  labelcategory String
  labeltype     String
  labelorder    String
  setname       String
  stroke        strokexml @relation(fields: [strokeid], references: [id])
  strokeid      String    @db.ObjectId
}

model colour {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  colourname        String
  colourdescription String
  storydescription  String
  stroke            strokexml @relation(fields: [strokeid], references: [id])
  strokeid          String    @db.ObjectId
  sizes             size[]
}

model size {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  primarysize String
  colour      colour @relation(fields: [colourid], references: [id])
  colourid    String @db.ObjectId
  upcs        upc[]
}

model upc {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  upcnumber     String
  secondarysize String
  sellingprice  String
  size          size   @relation(fields: [sizeid], references: [id])
  sizeid        String @db.ObjectId
}

model company {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  firstname String
  lastname  String
  bname     String
  pnum      String
  sa        String
  sl        String
  city      String
  post      String
  country   String
  region    String
  email     String
  password  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model orderqty {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  qty       Int
  order     order?   @relation(fields: [orderId], references: [id])
  orderId   String?  @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
